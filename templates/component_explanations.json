{
  "file_patterns": {
    ".*\\.json$": "A JSON configuration file that defines application settings, dependencies, and project metadata in a structured format",
    ".*\\.ya?ml$": "A YAML configuration file that defines application settings and infrastructure configurations in a human-readable format",
    ".*\\.toml$": "A TOML configuration file that defines project settings, dependencies, and build configurations with strong typing",
    ".*\\.ini$": "An initialization file that stores application configuration settings in a simple key-value format",
    ".*\\.env.*": "An environment configuration file that securely stores sensitive settings, API keys, and environment-specific variables",
    ".*\\.config.*": "A configuration file that defines application settings, build options, and runtime parameters",
    ".*\\.md$": "A Markdown documentation file providing project information, guides, and technical documentation in a readable format",
    ".*\\.rst$": "A reStructuredText documentation file offering detailed technical documentation with advanced formatting features",
    ".*\\.txt$": "A plain text file containing project documentation, notes, or general information in a simple format",
    ".*LICENSE.*": "A license file specifying the terms of use, distribution, and legal requirements for the project",
    ".*README.*": "A comprehensive documentation file providing project overview, setup instructions, and usage guidelines",
    ".*CHANGELOG.*": "A detailed log file tracking version history, feature additions, bug fixes, and breaking changes",
    ".*CONTRIBUTING.*": "A guide outlining contribution guidelines, coding standards, and development workflow for contributors",
    ".*CODE_OF_CONDUCT.*": "A document defining community standards, expected behavior, and guidelines for project participation",
    ".*\\.py$": "A Python source code file implementing application logic, classes, and functions with type hints and documentation",
    ".*\\.pyi$": "A Python interface file defining type hints and function signatures for improved type checking",
    ".*\\.js$": "A JavaScript source code file implementing client-side or server-side functionality with modern ES features",
    ".*\\.ts$": "A TypeScript source code file providing type-safe implementations with interfaces and advanced type features",
    ".*\\.jsx?$": "A React component file implementing UI components with JSX syntax and component lifecycle management",
    ".*\\.tsx?$": "A TypeScript React component providing type-safe UI implementations with proper prop typing",
    ".*\\.vue$": "A Vue.js component file implementing self-contained components with template, script, and style sections",
    ".*\\.go$": "A Go source code file implementing efficient and concurrent functionality with strong type safety",
    ".*\\.rs$": "A Rust source code file providing memory-safe implementations with ownership system and zero-cost abstractions",
    ".*\\.java$": "A Java source code file implementing object-oriented functionality with strong typing and platform independence",
    ".*\\.kt$": "A Kotlin source code file offering modern language features with Java interoperability and null safety",
    ".*\\.swift$": "A Swift source code file implementing iOS/macOS functionality with modern syntax and strong type safety",
    ".*\\.c$": "A C source code file implementing low-level system functionality with manual memory management",
    ".*\\.cpp$": "A C++ source code file providing object-oriented implementations with modern C++ features and STL",
    ".*\\.cs$": "A C# source code file implementing .NET functionality with modern language features and type safety",
    ".*\\.rb$": "A Ruby source code file offering dynamic programming with elegant syntax and metaprogramming features",
    ".*\\.php$": "A PHP source code file implementing server-side functionality with modern PHP features and type declarations",
    ".*\\.lua$": "A Lua source code file implementing lightweight scripting with tables, first-class functions and coroutines"
  },
  "directory_patterns": {
    ".*src.*": "Source code directory containing the main application implementation files",
    ".*test.*": "Test directory containing unit tests, integration tests, and test resources",
    ".*docs?.*": "Documentation directory storing project documentation, guides, and API references",
    ".*config.*": "Configuration directory containing various application and environment configurations",
    ".*scripts?.*": "Scripts directory containing automation scripts and development tools",
    ".*tools?.*": "Development tools directory containing utilities and helper scripts",
    ".*assets?.*": "Assets directory storing static resources like images, fonts, and media files",
    ".*templates?.*": "Templates directory containing reusable template files and code generators",
    ".*public.*": "Public directory containing publicly accessible static files and resources",
    ".*private.*": "Private directory storing sensitive resources and internal configurations",
    ".*dist.*": "Distribution directory containing built and optimized production files",
    ".*build.*": "Build directory containing compilation outputs and build artifacts",
    ".*vendor.*": "Third-party dependencies directory managed by package managers",
    ".*node_modules.*": "Node.js dependencies directory containing installed npm packages",
    ".*venv.*": "Python virtual environment directory isolating project dependencies",
    ".*bin.*": "Binary directory containing executable files and compiled outputs",
    ".*lib.*": "Library directory containing shared code libraries and modules",
    ".*api.*": "API directory implementing backend services and API endpoints",
    ".*ui.*": "User interface directory containing frontend components and layouts",
    ".*utils?.*": "Utilities directory containing helper functions and shared code",
    ".*helpers?.*": "Helpers directory providing utility functions and common operations",
    ".*models?.*": "Models directory containing data models and database schemas",
    ".*controllers?.*": "Controllers directory implementing business logic and request handling",
    ".*views?.*": "Views directory containing UI templates and view components",
    ".*services?.*": "Services directory implementing business logic and external integrations",
    ".*middleware.*": "Middleware directory containing request/response processing components",
    ".*migrations?.*": "Migrations directory managing database schema changes and data migrations",
    ".*static.*": "Static files directory containing unchanging assets and resources",
    ".*media.*": "Media directory storing user-uploaded files and media content",
    ".*logs?.*": "Logs directory containing application logs and error tracking",
    ".*cache.*": "Cache directory storing temporary data for performance optimization",
    ".*backup.*": "Backup directory containing data backups and recovery files",
    ".*hooks?.*": "Hooks directory containing Git hooks and event handlers",
    ".*plugins?.*": "Plugins directory containing extensible plugin implementations",
    ".*packages?.*": "Packages directory managing multiple related packages in a monorepo",
    ".*modules?.*": "Modules directory containing modular application components",
    ".*components?.*": "Components directory storing reusable UI components",
    ".*layouts?.*": "Layouts directory containing page layouts and templates",
    ".*pages?.*": "Pages directory implementing route-based page components",
    ".*styles?.*": "Styles directory containing CSS and styling resources",
    ".*themes?.*": "Themes directory managing different visual themes",
    ".*locales?.*": "Locales directory containing internationalization resources",
    ".*constants?.*": "Constants directory defining shared constant values",
    ".*types?.*": "Types directory containing TypeScript type definitions",
    ".*interfaces?.*": "Interfaces directory defining TypeScript interfaces",
    ".*contexts?.*": "Contexts directory implementing React context providers",
    ".*reducers?.*": "Reducers directory containing state management logic",
    ".*actions?.*": "Actions directory defining state management actions",
    ".*store.*": "Store directory implementing state management configuration",
    ".*fixtures?.*": "Fixtures directory containing test data and mock objects",
    ".*mocks?.*": "Mocks directory containing mock implementations for testing",
    ".*coverage.*": "Coverage directory containing test coverage reports",
    ".*reports?.*": "Reports directory storing various analysis reports",
    ".*examples?.*": "Examples directory containing sample code and usage examples",
    ".*tutorials?.*": "Tutorials directory providing learning resources and guides"
  }
} 